
================================
  Zybo Z7-20 reVISION Platform
--------------------------------
      Built for SDx 2017.4
--------------------------------
    copyright 2017 Digilent
================================

=========================
Pre-requisites
=========================

* SDx 2017.4 Installed on either a Windows or supported Linux host. 
* 2GB or larger microSD card 


============================
Known Issues and Limitations
============================

* The Live I/O demos currently demonstrate image tearing because the video data
  is drawn directly onto the active display buffer. This can be fixed in the 
  Pcam 5C demo by drawing to an inactive frame buffer and then calling the 
  mapFBtoCRTC function to page flip it onto the display (this is not tested).
  Unfortunately, the HDMI input demo may be harder to fix, because the input 
  pipeline does not provide a method to determine when a frame has completed.
  It seems the correct way to fix this would be to switch to the framebuffer 
  write IP core and overhaul the software. 

* Running simultaneous HDMI input and Pcam 5C may cause bandwidth issues at the
  DDR interconnect. This is not currently supported.


* Onboard audio codec is not currently supported in Linux.

============================
Creating the microSD card
============================

In order to use this platform you must first write the image included in the 
sd_image folder to a microSD card that is at least 2GB large.

*WARNING* Writing an image to a microSD card will delete all data on it. If you 
          are not careful during the process of writing the image, it is also 
          possible to accidentally erase data on other devices attached to your 
          system. Be very certain to select the correct SD card or block device 
          and that it does not have anything important on it.

For Windows:
	To do this in Windows, first extract the rootfs.img file from 
	sd_image/rootfs.zip. Then download and install win32diskimager from here:
	https://sourceforge.net/projects/win32diskimager/ .You can use that tool to 
	flash the rootfs.img file onto your microSD card.

For Linux:
	To do this in Linux, you can use the dd command. First identify the block device
	of your SD card, typically something like /dev/sdX. You can use lsblk at a 
	terminal to help find the correct block device. If you identify the wrong block 
	device you will overwrite information on some other drive attached to your 
	system, so be very careful. Once the block device has been identified, open a 
	terminal, cd into the sd_image folder and run the following (replace /dev/sdX):

	sudo umount /dev/sdX?
	unzip -p rootfs.zip | sudo dd of=/dev/sdX bs=2MB
	sync

	You may need to eject the microSD card and reinsert it before it is properly 
	detected by your system. Be sure the sync command returns before doing this.
	To enlarge the size of the second partition, you can run this command next:

	sudo umount /dev/sdX?
	sudo e2fsck -f /dev/sdX2
	sudo resize2fs /dev/sdX2
	sync

Once the image has been written to the microSD card it will be formatted with
2 partitions: a 500MB FAT32 partition for boot files generated by SDx and a 
~1.5 GB ext4 partition with the linux root file system. In Windows you will only
be able to see the 500MB partition, this is normal. 	

You only need to repeat this step if you want to reset the root file system to
the original state. Otherwise, you will just be copying files from SDx to the 
FAT32 partition.

============================
How to Use the Platform
============================

To install this platform and run the sample programs, do the following:

1. Set the SYSROOT environment variable and launch SDx. This is done in Linux by
   opening a new terminal and running:

   source /opt/Xilinx/SDx/2017.4/settings64.sh 
   export SYSROOT=<extracted platform absolute path>/zybo_z7_20/sw/sysroot
   sdx
  
   In Windows, go to Start->Control Panel->System->Advanced->Environment Variables
   and create a new environment variable called SYSROOT with the value:

   <extracted platform absolute path>\zybo_z7_20\sw\sysroot

   Then launch SDx 2017.4 as normal.

2. Point to an empty directory to use as a workspace. 

*NOTE* If you are also using the platform source then make sure you use a new, 
       empty workspace, not the workspace with the platform generator project.
       SDx currently has a bug that breaks the ability to hardware accelerate
       functions in a platform's include path when that platform's project is 
       also in the workspace.

3. In the top menu bar, click "Xilinx->Add Custom Platform..."
4. In the new window, click "Add Custom Platform..." and select the folder with
   the extracted platform (the folder this document is found in).
5. Click OK.
6. Now, in the top menu bar, click "File->New->SDx Project...".
7. Select Application Project and then press Next.
8. Name the project and press Next.
9. Select zybo_z7_20 and click Next.
10. Select Linux from the System Configuration drop-down.
11. Click Next, no other options should need to be changed on this page.
12. Select a sample application to run and click finish to create the project. 

*NOTE* When creating a project that uses xfopencv, it is best to always use a 
       sample project as a starting point. The source files can be replaced with
       the new project's source. This is because the sample project sets up a 
       lot of build settings like include paths, libraries, and symbols that are
       required for the libraries to build. 

13. Click the hammer button to build the project. This can take between 5-30 min
    on typical host machines.

*NOTE* See troubleshooting section if build completes quickly and it appears the
       function(s) were not moved into hardware.

14. After the build completes, look for the Debug->sd_card folder under your 
    project in the Project Explorer pane. Copy the entire contents of that 
    folder to the 500MB partition of microSD.

*NOTE* The pcam filter2d demo generates a scripts folder that includes several
       scripts that configure the pcam input pipeline to a specific resolution.
       One of these scripts must be run prior to running the generated .elf 
       file.

15. Eject the microSD card from the host and insert it into the Digilent board.
16. Attach the USB UART port of the board to the computer.
17. Attach a suitable external power supply to power the board's barrel jack, 
    and select it with the onboard power jumper (if it has one). USB power 
    typically will not work for Linux based designs. 
18. If running a Live I/O demo, be sure to attach a suitable display and video 
    source (see the demo description for information on supported displays and 
    video sources).
19. Switch the board on.
20. Open a terminal program on the host computer and attach to the COM port or 
    tty device at 115200 baud, no flow control, no parity. 
21. Press the red PS-SRST button to reset the board, and watch the output of the
    terminal. After boot completes, launch the demo by running the following 
    commands:

    mount /dev/mmcblk0p1 /mnt/
    cd /mnt
    ./<project name>.elf

    If command line options are necessary, the usage will be printed and you can
    try again with proper options. For File I/O demos, image(s) that can be used
    as inputs will be included on the SD card.
22. If running a File I/O demo, the microSD card will contain output images. If
    running a Live I/O demo, the output will be shown on the attached display
    until the demo is exited.
23. When done with the system, run the following command prior to powering off 
    the board to make sure the root file system is properly unmounted:

    poweroff 

===========================
Troubleshooting
===========================

*The "Add Hardware Functions" menu functions very slow for selecting xfopencv
 functions to accelerate. It is faster to locate the file that contains the 
 function in the "includes" drop-down of the Project Explorer pan. When you 
 locate the file, expand the xf dropdown to locate the function, right-click it,
 and select "Toggle HW/SW".

*If a project fails to build, then be sure to check the following:

  --Was the project created as an empty project? It may be missing some include 
    directories, symbols, library paths, and libraries in the build settings (see 
    step 12 note)
	
  --Did SYSROOT get set prior to launching SDx (see step 1)?
 
  --If using Ubuntu (or possibly other Linux distros), then the following must be
    run at least once on the system prior to using this platform:
 
    sudo ln -s /usr/bin/make /usr/bin/gmake
 
    This will create a symbolic link between gmake and make. See this Answer 
    record for an explanation:
 
    https://www.xilinx.com/support/answers/68344.html

*If a project has functions selected for hardware acceleration that are not being
 moved to hardware then delete the current build directory in your project (Debug
 or Release) and click "Build all" from the Project menu.

===========================
Further Information
===========================

For a complete list of this platform's features and known issues, as well as 
access to all sources used to create it, please see:

	https://reference.digilentinc.com/reference/software/revision/start

For more information on using this platform and the included xfopencv libraries,
please see the Xilinx OpenCV User Guide (ug1233):

	https://www.xilinx.com/support/documentation/sw_manuals/xilinx2017_4/ug1233-xilinx-opencv-user-guide.pdf

For a deep dive into how the SDSoC toolset works, please see the Xilinx SDSoC 
User Guide (ug1027) and other SDSoC documentation available here (make sure to
view the 2017.4 versions):

	https://www.xilinx.com/products/design-tools/software-zone/sdsoc.html#documentation

When creating accelerated programs in SDSoC, they are compiled using Vivado HLS.
It is useful to refer to the HLS documenation as well in order to learn how to 
write properly accelerated algorithms. HLS documentation can be found here (make 
sure to view the 2017.4 versions):

	https://www.xilinx.com/products/design-tools/vivado/integration/esl-design.html#documentation









